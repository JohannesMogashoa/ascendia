// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/**
 * Application Models
 */
model User {
  id                  String               @id @default(cuid())
  name                String?
  email               String?              @unique
  emailVerified        DateTime?
  image               String?
  accounts            Account[]
  sessions            Session[]
  InvestecIntegration InvestecIntegration?

  // NEW: Changed from `accounts` to `investecBankAccounts`
  investecBankAccounts InvestecBankAccount[]
  groupMemberships     GroupMember[]

  Group Group[]
}

model InvestecIntegration {
  id           String                @id @default(cuid())
  userId       String                @unique
  user         User                  @relation(fields: [userId], references: [id])
  clientId     String                @db.Text
  clientSecret String                @db.Text // Encrypt this
  apiKey       String                @db.Text // Encrypt this
  accessToken  String                @db.Text 
  refreshToken String                @db.Text
  expiresAt    DateTime
  scope        String
  accounts     InvestecBankAccount[]
}

model InvestecBankAccount {
  id                    String              @id @default(cuid())
  userId                String
  user                  User                @relation(fields: [userId], references: [id])
  investecAccountId     String // Investec's unique account ID
  accountName           String // e.g., "My Cheque Account"
  accountType           String // e.g., "CHEQUE", "SAVINGS"
  currency              String
  investecIntegrationId String
  investecIntegration   InvestecIntegration @relation(fields: [investecIntegrationId], references: [id])

  transactions    Transaction[]
  roundupSettings RoundupSetting?
}

model Group {
  id        String        @id @default(cuid())
  name      String
  creatorId String
  creator   User          @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  members   GroupMember[]
}

model GroupMember {
  id      String @id @default(cuid())
  groupId String
  userId  String
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  balance Float  @default(0.0)
}

model RoundupSetting {
  id                      String              @id @default(cuid())
  // NEW: Changed from `accountId` to `investecBankAccountId`
  investecBankAccountId   String              @unique // The account funds are rounded from
  // NEW: Changed from `account` to `investecBankAccount`
  investecBankAccount     InvestecBankAccount @relation(fields: [investecBankAccountId], references: [id])
  isActive                Boolean             @default(false)
  roundupToNearest        Float               @default(5.0) // e.g., 5 for R5
  targetInvestecAccountId String // Investec account ID for savings
  targetAccountName       String // User-friendly name for the target account
  lastRoundupDate         DateTime?
}

model Transaction {
  id                    String              @id @default(cuid())
  investecTransactionId String              @unique // Investec's unique transaction ID (might be `transactionId` or derived)
  // NEW: Changed from `accountId` to `investecBankAccountId`
  investecBankAccountId String
  // NEW: Changed from `account` to `investecBankAccount`
  investecBankAccount   InvestecBankAccount @relation(fields: [investecBankAccountId], references: [id])
  type                  String // e.g., "DEBIT", "CREDIT"
  status                String? // e.g., "POSTED"
  description           String
  amount                Float
  postingDate           DateTime
  valueDate             DateTime?
  category              String? // User-defined category
  isRoundupIgnored      Boolean             @default(false) // For roundup exclusions
}
